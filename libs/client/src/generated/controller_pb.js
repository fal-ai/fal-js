// source: controller.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var server_pb = require('./server_pb.js');
goog.object.extend(proto, server_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.controller.CancelScheduledRunRequest', null, global);
goog.exportSymbol('proto.controller.CancelScheduledRunResponse', null, global);
goog.exportSymbol('proto.controller.CreateUserKeyRequest', null, global);
goog.exportSymbol('proto.controller.CreateUserKeyResponse', null, global);
goog.exportSymbol('proto.controller.GetScheduledActivationLogsRequest', null, global);
goog.exportSymbol('proto.controller.GetScheduledActivationLogsResponse', null, global);
goog.exportSymbol('proto.controller.HostedMap', null, global);
goog.exportSymbol('proto.controller.HostedRun', null, global);
goog.exportSymbol('proto.controller.HostedRunCron', null, global);
goog.exportSymbol('proto.controller.HostedRunResult', null, global);
goog.exportSymbol('proto.controller.HostedRunStatus', null, global);
goog.exportSymbol('proto.controller.HostedRunStatus.State', null, global);
goog.exportSymbol('proto.controller.ListScheduledRunActivationsRequest', null, global);
goog.exportSymbol('proto.controller.ListScheduledRunActivationsResponse', null, global);
goog.exportSymbol('proto.controller.ListScheduledRunsRequest', null, global);
goog.exportSymbol('proto.controller.ListScheduledRunsResponse', null, global);
goog.exportSymbol('proto.controller.ListUserKeysRequest', null, global);
goog.exportSymbol('proto.controller.ListUserKeysResponse', null, global);
goog.exportSymbol('proto.controller.MachineRequirements', null, global);
goog.exportSymbol('proto.controller.RevokeUserKeyRequest', null, global);
goog.exportSymbol('proto.controller.RevokeUserKeyResponse', null, global);
goog.exportSymbol('proto.controller.ScheduleInfo', null, global);
goog.exportSymbol('proto.controller.ScheduleInfo.State', null, global);
goog.exportSymbol('proto.controller.UserKeyInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.HostedMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.HostedMap.repeatedFields_, null);
};
goog.inherits(proto.controller.HostedMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.HostedMap.displayName = 'proto.controller.HostedMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.HostedRun = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.HostedRun.repeatedFields_, null);
};
goog.inherits(proto.controller.HostedRun, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.HostedRun.displayName = 'proto.controller.HostedRun';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.HostedRunCron = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.HostedRunCron.repeatedFields_, null);
};
goog.inherits(proto.controller.HostedRunCron, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.HostedRunCron.displayName = 'proto.controller.HostedRunCron';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.CancelScheduledRunRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.CancelScheduledRunRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.CancelScheduledRunRequest.displayName = 'proto.controller.CancelScheduledRunRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.CancelScheduledRunResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.CancelScheduledRunResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.CancelScheduledRunResponse.displayName = 'proto.controller.CancelScheduledRunResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ListScheduledRunsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.ListScheduledRunsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ListScheduledRunsRequest.displayName = 'proto.controller.ListScheduledRunsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ListScheduledRunActivationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.ListScheduledRunActivationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ListScheduledRunActivationsRequest.displayName = 'proto.controller.ListScheduledRunActivationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ListScheduledRunActivationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.ListScheduledRunActivationsResponse.repeatedFields_, null);
};
goog.inherits(proto.controller.ListScheduledRunActivationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ListScheduledRunActivationsResponse.displayName = 'proto.controller.ListScheduledRunActivationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ListScheduledRunsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.ListScheduledRunsResponse.repeatedFields_, null);
};
goog.inherits(proto.controller.ListScheduledRunsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ListScheduledRunsResponse.displayName = 'proto.controller.ListScheduledRunsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.GetScheduledActivationLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.GetScheduledActivationLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.GetScheduledActivationLogsRequest.displayName = 'proto.controller.GetScheduledActivationLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.GetScheduledActivationLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.GetScheduledActivationLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.GetScheduledActivationLogsResponse.displayName = 'proto.controller.GetScheduledActivationLogsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.CreateUserKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.CreateUserKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.CreateUserKeyRequest.displayName = 'proto.controller.CreateUserKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.CreateUserKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.CreateUserKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.CreateUserKeyResponse.displayName = 'proto.controller.CreateUserKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ListUserKeysRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.ListUserKeysRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ListUserKeysRequest.displayName = 'proto.controller.ListUserKeysRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ListUserKeysResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.ListUserKeysResponse.repeatedFields_, null);
};
goog.inherits(proto.controller.ListUserKeysResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ListUserKeysResponse.displayName = 'proto.controller.ListUserKeysResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.RevokeUserKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.RevokeUserKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.RevokeUserKeyRequest.displayName = 'proto.controller.RevokeUserKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.RevokeUserKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.RevokeUserKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.RevokeUserKeyResponse.displayName = 'proto.controller.RevokeUserKeyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.UserKeyInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.UserKeyInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.UserKeyInfo.displayName = 'proto.controller.UserKeyInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.ScheduleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.ScheduleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.ScheduleInfo.displayName = 'proto.controller.ScheduleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.HostedRunResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.controller.HostedRunResult.repeatedFields_, null);
};
goog.inherits(proto.controller.HostedRunResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.HostedRunResult.displayName = 'proto.controller.HostedRunResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.HostedRunStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.HostedRunStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.HostedRunStatus.displayName = 'proto.controller.HostedRunStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.controller.MachineRequirements = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.controller.MachineRequirements, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.controller.MachineRequirements.displayName = 'proto.controller.MachineRequirements';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.HostedMap.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.HostedMap.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.HostedMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.HostedMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentsList: jspb.Message.toObjectList(msg.getEnvironmentsList(),
    server_pb.EnvironmentDefinition.toObject, includeInstance),
    machineRequirements: (f = msg.getMachineRequirements()) && proto.controller.MachineRequirements.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && common_pb.SerializedObject.toObject(includeInstance, f),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    common_pb.SerializedObject.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.HostedMap}
 */
proto.controller.HostedMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.HostedMap;
  return proto.controller.HostedMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.HostedMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.HostedMap}
 */
proto.controller.HostedMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.EnvironmentDefinition;
      reader.readMessage(value,server_pb.EnvironmentDefinition.deserializeBinaryFromReader);
      msg.addEnvironments(value);
      break;
    case 2:
      var value = new proto.controller.MachineRequirements;
      reader.readMessage(value,proto.controller.MachineRequirements.deserializeBinaryFromReader);
      msg.setMachineRequirements(value);
      break;
    case 3:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 4:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.HostedMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.HostedMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.HostedMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      server_pb.EnvironmentDefinition.serializeBinaryToWriter
    );
  }
  f = message.getMachineRequirements();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.controller.MachineRequirements.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EnvironmentDefinition environments = 1;
 * @return {!Array<!proto.EnvironmentDefinition>}
 */
proto.controller.HostedMap.prototype.getEnvironmentsList = function() {
  return /** @type{!Array<!proto.EnvironmentDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, server_pb.EnvironmentDefinition, 1));
};


/**
 * @param {!Array<!proto.EnvironmentDefinition>} value
 * @return {!proto.controller.HostedMap} returns this
*/
proto.controller.HostedMap.prototype.setEnvironmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EnvironmentDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EnvironmentDefinition}
 */
proto.controller.HostedMap.prototype.addEnvironments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EnvironmentDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.HostedMap} returns this
 */
proto.controller.HostedMap.prototype.clearEnvironmentsList = function() {
  return this.setEnvironmentsList([]);
};


/**
 * optional MachineRequirements machine_requirements = 2;
 * @return {?proto.controller.MachineRequirements}
 */
proto.controller.HostedMap.prototype.getMachineRequirements = function() {
  return /** @type{?proto.controller.MachineRequirements} */ (
    jspb.Message.getWrapperField(this, proto.controller.MachineRequirements, 2));
};


/**
 * @param {?proto.controller.MachineRequirements|undefined} value
 * @return {!proto.controller.HostedMap} returns this
*/
proto.controller.HostedMap.prototype.setMachineRequirements = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedMap} returns this
 */
proto.controller.HostedMap.prototype.clearMachineRequirements = function() {
  return this.setMachineRequirements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedMap.prototype.hasMachineRequirements = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SerializedObject function = 3;
 * @return {?proto.SerializedObject}
 */
proto.controller.HostedMap.prototype.getFunction = function() {
  return /** @type{?proto.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 3));
};


/**
 * @param {?proto.SerializedObject|undefined} value
 * @return {!proto.controller.HostedMap} returns this
*/
proto.controller.HostedMap.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedMap} returns this
 */
proto.controller.HostedMap.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedMap.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated SerializedObject inputs = 4;
 * @return {!Array<!proto.SerializedObject>}
 */
proto.controller.HostedMap.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.SerializedObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.SerializedObject, 4));
};


/**
 * @param {!Array<!proto.SerializedObject>} value
 * @return {!proto.controller.HostedMap} returns this
*/
proto.controller.HostedMap.prototype.setInputsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.SerializedObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.SerializedObject}
 */
proto.controller.HostedMap.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.SerializedObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.HostedMap} returns this
 */
proto.controller.HostedMap.prototype.clearInputsList = function() {
  return this.setInputsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.HostedRun.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.HostedRun.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.HostedRun.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.HostedRun} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRun.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentsList: jspb.Message.toObjectList(msg.getEnvironmentsList(),
    server_pb.EnvironmentDefinition.toObject, includeInstance),
    machineRequirements: (f = msg.getMachineRequirements()) && proto.controller.MachineRequirements.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && common_pb.SerializedObject.toObject(includeInstance, f),
    setupFunc: (f = msg.getSetupFunc()) && common_pb.SerializedObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.HostedRun}
 */
proto.controller.HostedRun.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.HostedRun;
  return proto.controller.HostedRun.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.HostedRun} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.HostedRun}
 */
proto.controller.HostedRun.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.EnvironmentDefinition;
      reader.readMessage(value,server_pb.EnvironmentDefinition.deserializeBinaryFromReader);
      msg.addEnvironments(value);
      break;
    case 2:
      var value = new proto.controller.MachineRequirements;
      reader.readMessage(value,proto.controller.MachineRequirements.deserializeBinaryFromReader);
      msg.setMachineRequirements(value);
      break;
    case 3:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 4:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setSetupFunc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.HostedRun.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.HostedRun.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.HostedRun} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRun.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      server_pb.EnvironmentDefinition.serializeBinaryToWriter
    );
  }
  f = message.getMachineRequirements();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.controller.MachineRequirements.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
  f = message.getSetupFunc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EnvironmentDefinition environments = 1;
 * @return {!Array<!proto.EnvironmentDefinition>}
 */
proto.controller.HostedRun.prototype.getEnvironmentsList = function() {
  return /** @type{!Array<!proto.EnvironmentDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, server_pb.EnvironmentDefinition, 1));
};


/**
 * @param {!Array<!proto.EnvironmentDefinition>} value
 * @return {!proto.controller.HostedRun} returns this
*/
proto.controller.HostedRun.prototype.setEnvironmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EnvironmentDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EnvironmentDefinition}
 */
proto.controller.HostedRun.prototype.addEnvironments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EnvironmentDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.HostedRun} returns this
 */
proto.controller.HostedRun.prototype.clearEnvironmentsList = function() {
  return this.setEnvironmentsList([]);
};


/**
 * optional MachineRequirements machine_requirements = 2;
 * @return {?proto.controller.MachineRequirements}
 */
proto.controller.HostedRun.prototype.getMachineRequirements = function() {
  return /** @type{?proto.controller.MachineRequirements} */ (
    jspb.Message.getWrapperField(this, proto.controller.MachineRequirements, 2));
};


/**
 * @param {?proto.controller.MachineRequirements|undefined} value
 * @return {!proto.controller.HostedRun} returns this
*/
proto.controller.HostedRun.prototype.setMachineRequirements = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRun} returns this
 */
proto.controller.HostedRun.prototype.clearMachineRequirements = function() {
  return this.setMachineRequirements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRun.prototype.hasMachineRequirements = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SerializedObject function = 3;
 * @return {?proto.SerializedObject}
 */
proto.controller.HostedRun.prototype.getFunction = function() {
  return /** @type{?proto.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 3));
};


/**
 * @param {?proto.SerializedObject|undefined} value
 * @return {!proto.controller.HostedRun} returns this
*/
proto.controller.HostedRun.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRun} returns this
 */
proto.controller.HostedRun.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRun.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional SerializedObject setup_func = 4;
 * @return {?proto.SerializedObject}
 */
proto.controller.HostedRun.prototype.getSetupFunc = function() {
  return /** @type{?proto.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 4));
};


/**
 * @param {?proto.SerializedObject|undefined} value
 * @return {!proto.controller.HostedRun} returns this
*/
proto.controller.HostedRun.prototype.setSetupFunc = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRun} returns this
 */
proto.controller.HostedRun.prototype.clearSetupFunc = function() {
  return this.setSetupFunc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRun.prototype.hasSetupFunc = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.HostedRunCron.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.HostedRunCron.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.HostedRunCron.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.HostedRunCron} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRunCron.toObject = function(includeInstance, msg) {
  var f, obj = {
    environmentsList: jspb.Message.toObjectList(msg.getEnvironmentsList(),
    server_pb.EnvironmentDefinition.toObject, includeInstance),
    machineRequirements: (f = msg.getMachineRequirements()) && proto.controller.MachineRequirements.toObject(includeInstance, f),
    pb_function: (f = msg.getFunction()) && common_pb.SerializedObject.toObject(includeInstance, f),
    cron: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.HostedRunCron}
 */
proto.controller.HostedRunCron.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.HostedRunCron;
  return proto.controller.HostedRunCron.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.HostedRunCron} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.HostedRunCron}
 */
proto.controller.HostedRunCron.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new server_pb.EnvironmentDefinition;
      reader.readMessage(value,server_pb.EnvironmentDefinition.deserializeBinaryFromReader);
      msg.addEnvironments(value);
      break;
    case 2:
      var value = new proto.controller.MachineRequirements;
      reader.readMessage(value,proto.controller.MachineRequirements.deserializeBinaryFromReader);
      msg.setMachineRequirements(value);
      break;
    case 3:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setFunction(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCron(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.HostedRunCron.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.HostedRunCron.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.HostedRunCron} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRunCron.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnvironmentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      server_pb.EnvironmentDefinition.serializeBinaryToWriter
    );
  }
  f = message.getMachineRequirements();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.controller.MachineRequirements.serializeBinaryToWriter
    );
  }
  f = message.getFunction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
  f = message.getCron();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated EnvironmentDefinition environments = 1;
 * @return {!Array<!proto.EnvironmentDefinition>}
 */
proto.controller.HostedRunCron.prototype.getEnvironmentsList = function() {
  return /** @type{!Array<!proto.EnvironmentDefinition>} */ (
    jspb.Message.getRepeatedWrapperField(this, server_pb.EnvironmentDefinition, 1));
};


/**
 * @param {!Array<!proto.EnvironmentDefinition>} value
 * @return {!proto.controller.HostedRunCron} returns this
*/
proto.controller.HostedRunCron.prototype.setEnvironmentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.EnvironmentDefinition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EnvironmentDefinition}
 */
proto.controller.HostedRunCron.prototype.addEnvironments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.EnvironmentDefinition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.HostedRunCron} returns this
 */
proto.controller.HostedRunCron.prototype.clearEnvironmentsList = function() {
  return this.setEnvironmentsList([]);
};


/**
 * optional MachineRequirements machine_requirements = 2;
 * @return {?proto.controller.MachineRequirements}
 */
proto.controller.HostedRunCron.prototype.getMachineRequirements = function() {
  return /** @type{?proto.controller.MachineRequirements} */ (
    jspb.Message.getWrapperField(this, proto.controller.MachineRequirements, 2));
};


/**
 * @param {?proto.controller.MachineRequirements|undefined} value
 * @return {!proto.controller.HostedRunCron} returns this
*/
proto.controller.HostedRunCron.prototype.setMachineRequirements = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRunCron} returns this
 */
proto.controller.HostedRunCron.prototype.clearMachineRequirements = function() {
  return this.setMachineRequirements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRunCron.prototype.hasMachineRequirements = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SerializedObject function = 3;
 * @return {?proto.SerializedObject}
 */
proto.controller.HostedRunCron.prototype.getFunction = function() {
  return /** @type{?proto.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 3));
};


/**
 * @param {?proto.SerializedObject|undefined} value
 * @return {!proto.controller.HostedRunCron} returns this
*/
proto.controller.HostedRunCron.prototype.setFunction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRunCron} returns this
 */
proto.controller.HostedRunCron.prototype.clearFunction = function() {
  return this.setFunction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRunCron.prototype.hasFunction = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string cron = 4;
 * @return {string}
 */
proto.controller.HostedRunCron.prototype.getCron = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.HostedRunCron} returns this
 */
proto.controller.HostedRunCron.prototype.setCron = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.CancelScheduledRunRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.CancelScheduledRunRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.CancelScheduledRunRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CancelScheduledRunRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    runId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.CancelScheduledRunRequest}
 */
proto.controller.CancelScheduledRunRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.CancelScheduledRunRequest;
  return proto.controller.CancelScheduledRunRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.CancelScheduledRunRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.CancelScheduledRunRequest}
 */
proto.controller.CancelScheduledRunRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.CancelScheduledRunRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.CancelScheduledRunRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.CancelScheduledRunRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CancelScheduledRunRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string run_id = 1;
 * @return {string}
 */
proto.controller.CancelScheduledRunRequest.prototype.getRunId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.CancelScheduledRunRequest} returns this
 */
proto.controller.CancelScheduledRunRequest.prototype.setRunId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.CancelScheduledRunResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.CancelScheduledRunResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.CancelScheduledRunResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CancelScheduledRunResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.CancelScheduledRunResponse}
 */
proto.controller.CancelScheduledRunResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.CancelScheduledRunResponse;
  return proto.controller.CancelScheduledRunResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.CancelScheduledRunResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.CancelScheduledRunResponse}
 */
proto.controller.CancelScheduledRunResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.CancelScheduledRunResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.CancelScheduledRunResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.CancelScheduledRunResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CancelScheduledRunResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ListScheduledRunsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ListScheduledRunsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ListScheduledRunsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ListScheduledRunsRequest}
 */
proto.controller.ListScheduledRunsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ListScheduledRunsRequest;
  return proto.controller.ListScheduledRunsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ListScheduledRunsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ListScheduledRunsRequest}
 */
proto.controller.ListScheduledRunsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ListScheduledRunsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ListScheduledRunsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ListScheduledRunsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ListScheduledRunActivationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ListScheduledRunActivationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ListScheduledRunActivationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunActivationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    runId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ListScheduledRunActivationsRequest}
 */
proto.controller.ListScheduledRunActivationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ListScheduledRunActivationsRequest;
  return proto.controller.ListScheduledRunActivationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ListScheduledRunActivationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ListScheduledRunActivationsRequest}
 */
proto.controller.ListScheduledRunActivationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ListScheduledRunActivationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ListScheduledRunActivationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ListScheduledRunActivationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunActivationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string run_id = 1;
 * @return {string}
 */
proto.controller.ListScheduledRunActivationsRequest.prototype.getRunId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.ListScheduledRunActivationsRequest} returns this
 */
proto.controller.ListScheduledRunActivationsRequest.prototype.setRunId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.ListScheduledRunActivationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ListScheduledRunActivationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ListScheduledRunActivationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ListScheduledRunActivationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunActivationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activationIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ListScheduledRunActivationsResponse}
 */
proto.controller.ListScheduledRunActivationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ListScheduledRunActivationsResponse;
  return proto.controller.ListScheduledRunActivationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ListScheduledRunActivationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ListScheduledRunActivationsResponse}
 */
proto.controller.ListScheduledRunActivationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addActivationIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ListScheduledRunActivationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ListScheduledRunActivationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ListScheduledRunActivationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunActivationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActivationIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string activation_ids = 1;
 * @return {!Array<string>}
 */
proto.controller.ListScheduledRunActivationsResponse.prototype.getActivationIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.controller.ListScheduledRunActivationsResponse} returns this
 */
proto.controller.ListScheduledRunActivationsResponse.prototype.setActivationIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.controller.ListScheduledRunActivationsResponse} returns this
 */
proto.controller.ListScheduledRunActivationsResponse.prototype.addActivationIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.ListScheduledRunActivationsResponse} returns this
 */
proto.controller.ListScheduledRunActivationsResponse.prototype.clearActivationIdsList = function() {
  return this.setActivationIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.ListScheduledRunsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ListScheduledRunsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ListScheduledRunsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ListScheduledRunsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    scheduledRunsList: jspb.Message.toObjectList(msg.getScheduledRunsList(),
    proto.controller.ScheduleInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ListScheduledRunsResponse}
 */
proto.controller.ListScheduledRunsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ListScheduledRunsResponse;
  return proto.controller.ListScheduledRunsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ListScheduledRunsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ListScheduledRunsResponse}
 */
proto.controller.ListScheduledRunsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.controller.ScheduleInfo;
      reader.readMessage(value,proto.controller.ScheduleInfo.deserializeBinaryFromReader);
      msg.addScheduledRuns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ListScheduledRunsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ListScheduledRunsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ListScheduledRunsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListScheduledRunsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScheduledRunsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.controller.ScheduleInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ScheduleInfo scheduled_runs = 1;
 * @return {!Array<!proto.controller.ScheduleInfo>}
 */
proto.controller.ListScheduledRunsResponse.prototype.getScheduledRunsList = function() {
  return /** @type{!Array<!proto.controller.ScheduleInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.controller.ScheduleInfo, 1));
};


/**
 * @param {!Array<!proto.controller.ScheduleInfo>} value
 * @return {!proto.controller.ListScheduledRunsResponse} returns this
*/
proto.controller.ListScheduledRunsResponse.prototype.setScheduledRunsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.controller.ScheduleInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.controller.ScheduleInfo}
 */
proto.controller.ListScheduledRunsResponse.prototype.addScheduledRuns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.controller.ScheduleInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.ListScheduledRunsResponse} returns this
 */
proto.controller.ListScheduledRunsResponse.prototype.clearScheduledRunsList = function() {
  return this.setScheduledRunsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.GetScheduledActivationLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.GetScheduledActivationLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.GetScheduledActivationLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.GetScheduledActivationLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    runId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    activationId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.GetScheduledActivationLogsRequest}
 */
proto.controller.GetScheduledActivationLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.GetScheduledActivationLogsRequest;
  return proto.controller.GetScheduledActivationLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.GetScheduledActivationLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.GetScheduledActivationLogsRequest}
 */
proto.controller.GetScheduledActivationLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActivationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.GetScheduledActivationLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.GetScheduledActivationLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.GetScheduledActivationLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.GetScheduledActivationLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActivationId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string run_id = 1;
 * @return {string}
 */
proto.controller.GetScheduledActivationLogsRequest.prototype.getRunId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.GetScheduledActivationLogsRequest} returns this
 */
proto.controller.GetScheduledActivationLogsRequest.prototype.setRunId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string activation_id = 2;
 * @return {string}
 */
proto.controller.GetScheduledActivationLogsRequest.prototype.getActivationId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.GetScheduledActivationLogsRequest} returns this
 */
proto.controller.GetScheduledActivationLogsRequest.prototype.setActivationId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.GetScheduledActivationLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.GetScheduledActivationLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.GetScheduledActivationLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.GetScheduledActivationLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    rawLogs: msg.getRawLogs_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.GetScheduledActivationLogsResponse}
 */
proto.controller.GetScheduledActivationLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.GetScheduledActivationLogsResponse;
  return proto.controller.GetScheduledActivationLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.GetScheduledActivationLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.GetScheduledActivationLogsResponse}
 */
proto.controller.GetScheduledActivationLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.GetScheduledActivationLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.GetScheduledActivationLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.GetScheduledActivationLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.GetScheduledActivationLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawLogs_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes raw_logs = 1;
 * @return {!(string|Uint8Array)}
 */
proto.controller.GetScheduledActivationLogsResponse.prototype.getRawLogs = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes raw_logs = 1;
 * This is a type-conversion wrapper around `getRawLogs()`
 * @return {string}
 */
proto.controller.GetScheduledActivationLogsResponse.prototype.getRawLogs_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawLogs()));
};


/**
 * optional bytes raw_logs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawLogs()`
 * @return {!Uint8Array}
 */
proto.controller.GetScheduledActivationLogsResponse.prototype.getRawLogs_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawLogs()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.controller.GetScheduledActivationLogsResponse} returns this
 */
proto.controller.GetScheduledActivationLogsResponse.prototype.setRawLogs = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.CreateUserKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.CreateUserKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.CreateUserKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CreateUserKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.CreateUserKeyRequest}
 */
proto.controller.CreateUserKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.CreateUserKeyRequest;
  return proto.controller.CreateUserKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.CreateUserKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.CreateUserKeyRequest}
 */
proto.controller.CreateUserKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.CreateUserKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.CreateUserKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.CreateUserKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CreateUserKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.CreateUserKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.CreateUserKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.CreateUserKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CreateUserKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keySecret: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.CreateUserKeyResponse}
 */
proto.controller.CreateUserKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.CreateUserKeyResponse;
  return proto.controller.CreateUserKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.CreateUserKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.CreateUserKeyResponse}
 */
proto.controller.CreateUserKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeySecret(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.CreateUserKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.CreateUserKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.CreateUserKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.CreateUserKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeySecret();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key_secret = 1;
 * @return {string}
 */
proto.controller.CreateUserKeyResponse.prototype.getKeySecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.CreateUserKeyResponse} returns this
 */
proto.controller.CreateUserKeyResponse.prototype.setKeySecret = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key_id = 2;
 * @return {string}
 */
proto.controller.CreateUserKeyResponse.prototype.getKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.CreateUserKeyResponse} returns this
 */
proto.controller.CreateUserKeyResponse.prototype.setKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.controller.CreateUserKeyResponse.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.CreateUserKeyResponse} returns this
 */
proto.controller.CreateUserKeyResponse.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.controller.CreateUserKeyResponse} returns this
 */
proto.controller.CreateUserKeyResponse.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.CreateUserKeyResponse.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ListUserKeysRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ListUserKeysRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ListUserKeysRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListUserKeysRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ListUserKeysRequest}
 */
proto.controller.ListUserKeysRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ListUserKeysRequest;
  return proto.controller.ListUserKeysRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ListUserKeysRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ListUserKeysRequest}
 */
proto.controller.ListUserKeysRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ListUserKeysRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ListUserKeysRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ListUserKeysRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListUserKeysRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.ListUserKeysResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ListUserKeysResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ListUserKeysResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ListUserKeysResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListUserKeysResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    userKeysList: jspb.Message.toObjectList(msg.getUserKeysList(),
    proto.controller.UserKeyInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ListUserKeysResponse}
 */
proto.controller.ListUserKeysResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ListUserKeysResponse;
  return proto.controller.ListUserKeysResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ListUserKeysResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ListUserKeysResponse}
 */
proto.controller.ListUserKeysResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.controller.UserKeyInfo;
      reader.readMessage(value,proto.controller.UserKeyInfo.deserializeBinaryFromReader);
      msg.addUserKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ListUserKeysResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ListUserKeysResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ListUserKeysResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ListUserKeysResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.controller.UserKeyInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserKeyInfo user_keys = 1;
 * @return {!Array<!proto.controller.UserKeyInfo>}
 */
proto.controller.ListUserKeysResponse.prototype.getUserKeysList = function() {
  return /** @type{!Array<!proto.controller.UserKeyInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.controller.UserKeyInfo, 1));
};


/**
 * @param {!Array<!proto.controller.UserKeyInfo>} value
 * @return {!proto.controller.ListUserKeysResponse} returns this
*/
proto.controller.ListUserKeysResponse.prototype.setUserKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.controller.UserKeyInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.controller.UserKeyInfo}
 */
proto.controller.ListUserKeysResponse.prototype.addUserKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.controller.UserKeyInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.ListUserKeysResponse} returns this
 */
proto.controller.ListUserKeysResponse.prototype.clearUserKeysList = function() {
  return this.setUserKeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.RevokeUserKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.RevokeUserKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.RevokeUserKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.RevokeUserKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.RevokeUserKeyRequest}
 */
proto.controller.RevokeUserKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.RevokeUserKeyRequest;
  return proto.controller.RevokeUserKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.RevokeUserKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.RevokeUserKeyRequest}
 */
proto.controller.RevokeUserKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.RevokeUserKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.RevokeUserKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.RevokeUserKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.RevokeUserKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string key_id = 1;
 * @return {string}
 */
proto.controller.RevokeUserKeyRequest.prototype.getKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.RevokeUserKeyRequest} returns this
 */
proto.controller.RevokeUserKeyRequest.prototype.setKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.RevokeUserKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.RevokeUserKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.RevokeUserKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.RevokeUserKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.RevokeUserKeyResponse}
 */
proto.controller.RevokeUserKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.RevokeUserKeyResponse;
  return proto.controller.RevokeUserKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.RevokeUserKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.RevokeUserKeyResponse}
 */
proto.controller.RevokeUserKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.RevokeUserKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.RevokeUserKeyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.RevokeUserKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.RevokeUserKeyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.UserKeyInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.UserKeyInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.UserKeyInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.UserKeyInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.UserKeyInfo}
 */
proto.controller.UserKeyInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.UserKeyInfo;
  return proto.controller.UserKeyInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.UserKeyInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.UserKeyInfo}
 */
proto.controller.UserKeyInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyId(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.UserKeyInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.UserKeyInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.UserKeyInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.UserKeyInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string key_id = 1;
 * @return {string}
 */
proto.controller.UserKeyInfo.prototype.getKeyId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.UserKeyInfo} returns this
 */
proto.controller.UserKeyInfo.prototype.setKeyId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.controller.UserKeyInfo.prototype.getCreatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.controller.UserKeyInfo} returns this
*/
proto.controller.UserKeyInfo.prototype.setCreatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.UserKeyInfo} returns this
 */
proto.controller.UserKeyInfo.prototype.clearCreatedAt = function() {
  return this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.UserKeyInfo.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.ScheduleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.ScheduleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.ScheduleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ScheduleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    runId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cron: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.ScheduleInfo}
 */
proto.controller.ScheduleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.ScheduleInfo;
  return proto.controller.ScheduleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.ScheduleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.ScheduleInfo}
 */
proto.controller.ScheduleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunId(value);
      break;
    case 2:
      var value = /** @type {!proto.controller.ScheduleInfo.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCron(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.ScheduleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.ScheduleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.ScheduleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.ScheduleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCron();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.controller.ScheduleInfo.State = {
  SCHEDULED: 0,
  INTERNAL_FAILURE: 1,
  CANCELLED: 2
};

/**
 * optional string run_id = 1;
 * @return {string}
 */
proto.controller.ScheduleInfo.prototype.getRunId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.ScheduleInfo} returns this
 */
proto.controller.ScheduleInfo.prototype.setRunId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional State state = 2;
 * @return {!proto.controller.ScheduleInfo.State}
 */
proto.controller.ScheduleInfo.prototype.getState = function() {
  return /** @type {!proto.controller.ScheduleInfo.State} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.controller.ScheduleInfo.State} value
 * @return {!proto.controller.ScheduleInfo} returns this
 */
proto.controller.ScheduleInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string cron = 3;
 * @return {string}
 */
proto.controller.ScheduleInfo.prototype.getCron = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.ScheduleInfo} returns this
 */
proto.controller.ScheduleInfo.prototype.setCron = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.controller.HostedRunResult.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.HostedRunResult.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.HostedRunResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.HostedRunResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRunResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    runId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: (f = msg.getStatus()) && proto.controller.HostedRunStatus.toObject(includeInstance, f),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    common_pb.Log.toObject, includeInstance),
    returnValue: (f = msg.getReturnValue()) && common_pb.SerializedObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.HostedRunResult}
 */
proto.controller.HostedRunResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.HostedRunResult;
  return proto.controller.HostedRunResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.HostedRunResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.HostedRunResult}
 */
proto.controller.HostedRunResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRunId(value);
      break;
    case 2:
      var value = new proto.controller.HostedRunStatus;
      reader.readMessage(value,proto.controller.HostedRunStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 3:
      var value = new common_pb.Log;
      reader.readMessage(value,common_pb.Log.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 4:
      var value = new common_pb.SerializedObject;
      reader.readMessage(value,common_pb.SerializedObject.deserializeBinaryFromReader);
      msg.setReturnValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.HostedRunResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.HostedRunResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.HostedRunResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRunResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRunId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.controller.HostedRunStatus.serializeBinaryToWriter
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.Log.serializeBinaryToWriter
    );
  }
  f = message.getReturnValue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.SerializedObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional string run_id = 1;
 * @return {string}
 */
proto.controller.HostedRunResult.prototype.getRunId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.HostedRunResult} returns this
 */
proto.controller.HostedRunResult.prototype.setRunId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional HostedRunStatus status = 2;
 * @return {?proto.controller.HostedRunStatus}
 */
proto.controller.HostedRunResult.prototype.getStatus = function() {
  return /** @type{?proto.controller.HostedRunStatus} */ (
    jspb.Message.getWrapperField(this, proto.controller.HostedRunStatus, 2));
};


/**
 * @param {?proto.controller.HostedRunStatus|undefined} value
 * @return {!proto.controller.HostedRunResult} returns this
*/
proto.controller.HostedRunResult.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRunResult} returns this
 */
proto.controller.HostedRunResult.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRunResult.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Log logs = 3;
 * @return {!Array<!proto.Log>}
 */
proto.controller.HostedRunResult.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.Log>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Log, 3));
};


/**
 * @param {!Array<!proto.Log>} value
 * @return {!proto.controller.HostedRunResult} returns this
*/
proto.controller.HostedRunResult.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Log=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Log}
 */
proto.controller.HostedRunResult.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Log, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.controller.HostedRunResult} returns this
 */
proto.controller.HostedRunResult.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * optional SerializedObject return_value = 4;
 * @return {?proto.SerializedObject}
 */
proto.controller.HostedRunResult.prototype.getReturnValue = function() {
  return /** @type{?proto.SerializedObject} */ (
    jspb.Message.getWrapperField(this, common_pb.SerializedObject, 4));
};


/**
 * @param {?proto.SerializedObject|undefined} value
 * @return {!proto.controller.HostedRunResult} returns this
*/
proto.controller.HostedRunResult.prototype.setReturnValue = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.controller.HostedRunResult} returns this
 */
proto.controller.HostedRunResult.prototype.clearReturnValue = function() {
  return this.setReturnValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.HostedRunResult.prototype.hasReturnValue = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.HostedRunStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.HostedRunStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.HostedRunStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRunStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.HostedRunStatus}
 */
proto.controller.HostedRunStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.HostedRunStatus;
  return proto.controller.HostedRunStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.HostedRunStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.HostedRunStatus}
 */
proto.controller.HostedRunStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.controller.HostedRunStatus.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.HostedRunStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.HostedRunStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.HostedRunStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.HostedRunStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.controller.HostedRunStatus.State = {
  IN_PROGRESS: 0,
  SUCCESS: 1,
  INTERNAL_FAILURE: 2
};

/**
 * optional State state = 1;
 * @return {!proto.controller.HostedRunStatus.State}
 */
proto.controller.HostedRunStatus.prototype.getState = function() {
  return /** @type {!proto.controller.HostedRunStatus.State} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.controller.HostedRunStatus.State} value
 * @return {!proto.controller.HostedRunStatus} returns this
 */
proto.controller.HostedRunStatus.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.controller.MachineRequirements.prototype.toObject = function(opt_includeInstance) {
  return proto.controller.MachineRequirements.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.controller.MachineRequirements} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.MachineRequirements.toObject = function(includeInstance, msg) {
  var f, obj = {
    machineType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keepAlive: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.controller.MachineRequirements}
 */
proto.controller.MachineRequirements.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.controller.MachineRequirements;
  return proto.controller.MachineRequirements.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.controller.MachineRequirements} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.controller.MachineRequirements}
 */
proto.controller.MachineRequirements.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMachineType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKeepAlive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.controller.MachineRequirements.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.controller.MachineRequirements.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.controller.MachineRequirements} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.controller.MachineRequirements.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMachineType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string machine_type = 1;
 * @return {string}
 */
proto.controller.MachineRequirements.prototype.getMachineType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.controller.MachineRequirements} returns this
 */
proto.controller.MachineRequirements.prototype.setMachineType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 keep_alive = 2;
 * @return {number}
 */
proto.controller.MachineRequirements.prototype.getKeepAlive = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.controller.MachineRequirements} returns this
 */
proto.controller.MachineRequirements.prototype.setKeepAlive = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.controller.MachineRequirements} returns this
 */
proto.controller.MachineRequirements.prototype.clearKeepAlive = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.controller.MachineRequirements.prototype.hasKeepAlive = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.controller);
